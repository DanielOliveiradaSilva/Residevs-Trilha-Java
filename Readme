
### PAJ001
 Atividade Pratica de Java 
___

*Exercicios:*
##### 1. O que é uma classe em Java e qual é a diferença entre uma classe e um objeto? Dê 5 exemplos mostrando-os em C++ e em Java.
<div style="text-align: justify">

*Resosta: Uma classe em Java é um bloco de construção da liguagem de programação. Através dela é possivel modelar uma estrutura representativa de um objeto do mundo real.*

*Em Java, um objeto é uma instância de uma classe, ou seja quando se cria uma classe, está basicamente definindo uma estrutura(corpo) de um objeto desse tipo.* 
</div>

Aqui estão as definições das classes `Pessoa` , `Animal`, `Carro`, `Bola` e `Livro` em C++ e Java.

### Classe Pessoa

```cpp
// c++
class Pessoa {
    private:
        double peso;
        double altura;
        string idade;
        
    //ações(metodo)
    //gets e sets
};
```

```java
// java
public class Pessoa{
    private Double peso;
    private Double altura;
    private String idade;
    //ações(metodo)
    //gets e sets
}
```

### Classe Animal
```cpp
//  cpp
class Animal{
    private:
        string raça;
        string idade;
        string tamanho;
    //ações(metodo)
    //gets e sets
}
```

```java
// java
public class Animal{
    private Double peso;
    private Double altura;
    private String idade;
    //ações(metodo)
    //gets e sets
}
```
### Classe Carro

```cpp
//  cpp
class Carro {
    private:
        string marca;
        string modelo;
        int ano;
        float preco;
    
    //ações(metodo)
    //gets e sets
}
```
```java
//  java
public class Carro {
    private String marca;
    private String modelo;
    private int ano;
    private float preco;
    //ações(metodo)
    //gets e sets
}
```

### Classe Bola
```cpp
//  cpp
class Bola {
    private:
        string cor;
        float diametro;
    //ações(metodo)
    //gets e sets
}
```

```java
//  java
public class Bola {
    private String cor;
    private float diametro;

    //ações(metodo)
    //gets e sets
}
```

### Classe Livro
```cpp
//  cpp
class Livro {
    private:
        string titulo;
        string autor;
        int numPaginas;
    //ações(metodo)
    //gets e sets
}
```

```java
//  java
public class Livro {
    private String titulo;
    private String autor;
    private int numPaginas;
    //ações(metodo)
    //gets e sets
}
```
##### 2. Como você declara uma variável em Java e quais são os tipos de dados primitivos mais comuns? Faça um paralelo entre isso e a mesma coisa na linguagem C++ 

*Em Java, a declaração funciona da seguinte maneira:*

```java
   //java
    //Exemplo:
    int numero;
    //tipoDaVariavel nomeDaVariavel;

```

*Os tipos de dados primitivos mais comuns em Java são:*
`int:` Armazena números inteiros.
`double:` Armazena números de ponto flutuante de dupla precisão.
`boolean:` Armazena valores lógicos (verdadeiro ou falso).
`char:` Armazena um único caractere Unicode.
`byte:` Armazena números inteiros pequenos.
`short:` Armazena números inteiros curtos.
`long:` Armazena números inteiros longos.
`float:` Armazena números de ponto flutuante de precisão simples
###
*Em C++, a declaração funciona da seguinte maneira:*
```cpp
    //Exemplo
    char caracter;
    //tipoDaVariavel nomeDaVariavel;

```

*Os tipos de dados mais comuns em C++ são:*

`int:` Armazena números inteiros.
`double:` Armazena números de ponto flutuante de dupla precisão.
`bool:` Armazena valores booleanos (verdadeiro ou falso).
`char:` Armazena um único caractere ASCII.
`unsigned int:` Armazena números inteiros positivos.
`short:` Armazena números inteiros curtos.
`long:` Armazena números inteiros longos.

<div style="text-align: justify">
    Tanto em Java quanto em C++, os tipos de dados primitivos fornecem valores básicos para armazenamento de dados.
</div>

##### 3. Explique o conceito de herança em Java e como você pode criar uma subclasse a partir de uma classe existente. Faça um paralelo com C++, apresentando 5 exemplos.

*Resosta:* Herança em java, é um conceito que se relacionaciona em comparação com parentesco, onde uma classe filho(uma cria)(uma sub classe) herda os caractersiticas geneticas(atributos e metodos) da classe pai(genitor)(super classe).
####
Em java para criar uma sub classe(ou a cria de um genitor), pode ser feito da seguinte maneira:

### # 1. Cachorro Herda de Animal
```java
//java
// Classe base (superclasse)
class Animal {
    void fazerSom() {
        System.out.println("O animal faz um som");
    }
}

// Subclasse que herda de Animal
class Cachorro extends Animal {
    void latir() {
        System.out.println("O cachorro late");
    }
}

```
```cpp
// C++

// Classe base (superclasse)
class Animal {
public:
    void fazerSom() {
        cout << "O animal faz um som" << std::endl;
    }
};

// Subclasse que herda de Animal
class Cachorro : public Animal {
public:
    void latir() {
        cout << "O cachorro late" << std::endl;
    }
};


```
### # 2. Funcionario Herda de Pessoa
```java
//java
// Classe base (superclasse) Pessoa
public class Pessoa {
    private String nome;
    private int idade;

    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }
}

// Classe Funcionario que herda de Pessoa
public class Funcionario extends Pessoa {
    private double salario;

    public Funcionario(String nome, int idade, double salario) {
        super(nome, idade);
        this.salario = salario;
    }

}

```
```cpp
//cpp
// Classe base (superclasse) Pessoa
class Pessoa {
private:
    string nome;
    int idade;

public:
    Pessoa(string nome, int idade) : nome(nome), idade(idade) {}

};

// Classe Funcionario que herda de Pessoa
class Funcionario : public Pessoa {
private:
    double salario;

public:
    Funcionario(string nome, int idade, double salario) : Pessoa(nome, idade), salario(salario) {}

};
```
#### # 3. Polpança Herda de ContaBancaria
##
```java
// Classe base: ContaBancaria
public class ContaBancaria {
    protected double saldo;

    public ContaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    public void depositar(double valor) {
        saldo += valor;
        System.out.println("Depósito de " + valor + " realizado. Saldo atual: " + saldo);
    }

    public void sacar(double valor) {
        if (valor <= saldo) {
            saldo -= valor;
            System.out.println("Saque de " + valor + " realizado. Saldo atual: " + saldo);
        } else {
            System.out.println("Saldo insuficiente para saque.");
        }
    }

    public double getSaldo() {
        return saldo;
    }
}

// Classe derivada: ContaPoupanca (herda de ContaBancaria)
public class ContaPoupanca extends ContaBancaria {
    private double taxaDeJuros;

    public ContaPoupanca(double saldoInicial, double taxaDeJuros) {
        super(saldoInicial);
        this.taxaDeJuros = taxaDeJuros;
    }

    public void calcularJuros(int meses) {
        double juros = saldo * taxaDeJuros * meses;
        saldo += juros;
        System.out.println("Juros de " + juros + " aplicados. Saldo atual: " + saldo);
    }

    // Aqui, você pode adicionar métodos específicos para ContaPoupanca, se necessário
}

```
```cpp
//C++
// Classe base: Pessoa
class Pessoa {
private:
    string nome;
    string sobrenome;

public:
    Pessoa(string nome, string sobrenome) : nome(nome), sobrenome(sobrenome) {}

    void exibirInformacoes() {
        cout << "Nome: " << nome << std::endl;
        cout << "Sobrenome: " << sobrenome << endl;
    }
    // Outros métodos e atributos da classe Pessoa, se necessário
};

// Classe derivada: Cliente (herda de Pessoa)
class Cliente : public Pessoa {
private:
    int codigoCliente;
    double saldo;

public:
    Cliente(string nome, string sobrenome, int codigoCliente, double saldo)
        : Pessoa(nome, sobrenome), codigoCliente(codigoCliente), saldo(saldo) {}

    void exibirDetalhesCliente() {
        exibirInformacoes(); // Chamando o método da classe base
        cout << "Código do Cliente: " << codigoCliente << endl;
        cout << "Saldo: " << saldo << endl;
    }
    // Outros métodos e atributos específicos do Cliente
};

```

### 4. Cliente herda Pessoa
```java
    //java
    // Classe base: Pessoa
public class Pessoa {
    private String nome;
    private String sobrenome;

    public Pessoa(String nome, String sobrenome) {
        this.nome = nome;
        this.sobrenome = sobrenome;
    }

    public void exibirInformacoes() {
        System.out.println("Nome: " + nome);
        System.out.println("Sobrenome: " + sobrenome);
    }

    // Outros métodos e atributos da classe Pessoa, se necessário

}

// Classe derivada: Cliente (herda de Pessoa)
public class Cliente extends Pessoa {
    private int codigoCliente;
    private double saldo;

    public Cliente(String nome, String sobrenome, int codigoCliente, double saldo) {
        super(nome, sobrenome);
        this.codigoCliente = codigoCliente;
        this.saldo = saldo;
    }

    public void exibirDetalhesCliente() {
        exibirInformacoes(); // Chamando o método da classe base
        System.out.println("Código do Cliente: " + codigoCliente);
        System.out.println("Saldo: " + saldo);
    }

    // Outros métodos e atributos específicos do Cliente
}
```

```cpp
 //cpp
// Classe base: Pessoa
class Pessoa {
private:
    string nome;
    string sobrenome;

public:
    Pessoa(string nome, string sobrenome) : nome(nome), sobrenome(sobrenome) {}

    void exibirInformacoes() {
       cout << "Nome: " << nome << endl;
        cout << "Sobrenome: " << sobrenome << endl;
    }
    // Outros métodos e atributos da classe Pessoa, se necessário
};

// Classe derivada: Cliente (herda de Pessoa)
class Cliente : public Pessoa {
private:
    int codigoCliente;
    double saldo;

public:
    Cliente(string nome, string sobrensome, int codigoCliente, double saldo)
        : Pessoa(nome, sobrenome), codigoCliente(codigoCliente), saldo(saldo) {}

    void exibirDetalhesCliente() {
        exibirInformacoes(); // Chamando o método da classe base
        cout << "Código do Cliente: " << codigoCliente << endl;
        cout << "Saldo: " << saldo <<endl;
    }
    // Outros métodos e atributos específicos do Cliente
};

```

#### 5. Celular Herda de Dispotivo
```java
//java
class Dispositivo {
    protected String modelo;
    protected String marca;

    public Dispositivo(String modelo, String marca) {
        this.modelo = modelo;
        this.marca = marca;
    }

    public void ligar() {
        System.out.println("Ligando o dispositivo " + marca + " " + modelo);
    }

    public void desligar() {
        System.out.println("Desligando o dispositivo " + marca + " " + modelo);
    }
    // Outros métodos e atributos da classe Dispositivo, se necessário
}

class Celular extends Dispositivo {
    private String numeroTelefone;

    public Celular(String modelo, String marca, String numeroTelefone) {
        super(modelo, marca);
        this.numeroTelefone = numeroTelefone;
    }

    public void fazerLigacao(String numero) {
        System.out.println("Ligando para " + numero + " a partir do celular " + marca + " " + modelo);
    }

    // Outros métodos e atributos específicos do Celular
}


```

```cpp
//C++
#include <iostream>
#include <string>

// Classe base: Dispositivo
class Dispositivo {
protected:
    string modelo;
    string marca;

public:
    Dispositivo(string modelo, string marca) : modelo(modelo), marca(marca) {}

    void ligar() {
        cout << "Ligando o dispositivo " << marca << " " << modelo << std::endl;
    }

    void desligar() {
         cout << "Desligando o dispositivo " << marca << " " << modelo << endl;
    }
    // Outros métodos e atributos da classe Dispositivo, se necessário
};

// Classe derivada: Celular (herda de Dispositivo)
class Celular : public Dispositivo {
private:
    string numeroTelefone;

public:
    Celular(std
    ::string modelo, std::string marca, std::string numeroTelefone) : Dispositivo(modelo, marca), numeroTelefone(numeroTelefone) {}

    void fazerLigacao(string numero) {
        cout << "Ligando para " << numero << " a partir do celular " << marca << " " << modelo << endl;

    }
    
    
    // Outros métodos e atributos específicos do Celular
};

```

##### 4. Quando declaramos uma variável em Java, temos, na verdade, um ponteiro. Em C++ é diferente. Discorra sobre esse aspecto. 

<div style="text-align: justify">
Em Java, quando declaramos uma variável de um objeto de classe (não primitivos), o que ocorre é que estamos criando uma referência para esse objeto, não um ponteiro direto.

Referência em Java: Em Java, as variáveis de objeto contêm referências a objetos, não os objetos em si. Quando você declara uma variável de um objeto, está criando uma referência para esse objeto. Por exemplo: Pessoa pessoa = new Pessoa();. Aqui, pessoa é uma referência para um objeto Pessoa, não é o próprio objeto.

Alocação de memória: O new em Java aloca memória para o objeto no heap e retorna a referência para esse objeto. A variável pessoa contém essa referência, indicando onde o objeto está localizado na memória.

Diferenças com ponteiros em C++: Embora seja comum comparar referências em Java com ponteiros em C++, existem diferenças significativas. As referências em Java não oferecem aritmética de ponteiros, não permitem manipular diretamente os endereços de memória e não têm os mesmos comportamentos que os ponteiros em C++. Em Java, a manipulação de memória é gerenciada pela JVM (Java Virtual Machine) e não há acesso direto à memória como em C++.

Portanto, em Java, ao declarar uma variável de um objeto, você está criando uma referência para esse objeto, permitindo acesso e manipulação do objeto, mas sem acesso direto à sua localização na memória como seria feito com um ponteiro em C++.
</div>

##### Calculadora Simples:
<div style="text-align: justify">
Crie um programa que funcione como uma calculadora simples. O programa deve pedir ao usuário que insira dois números e depois escolha uma operação (adição, subtração, multiplicação ou divisão). Em seguida, o programa deve calcular o resultado e exibi-lo. 
</div>
<a href="Calculadora/Calculadora/src/Calculadora.java">Acessar Código</a>

##### Conversor de Temperatura:
<div style="text-align: justify">
Conversor de Temperatura:
Escreva um programa que converta a temperatura de graus Celsius para Fahrenheit ou vice-versa, dependendo da escolha do usuário. O programa deve solicitar ao usuário que insira a temperatura e a unidade de origem (Celsius ou Fahrenheit) e, em seguida, realizar a conversão e exibir o resultado. A fórmula para a conversão de Celsius para Fahrenheit é: F = (C * 9/5) + 32, onde F é a temperatura em Fahrenheit
e C é a temperatura em Celsius. 
</div>
<a href="ConversorDeTemperatura/src/Conversor.java">Acessar Código</a>